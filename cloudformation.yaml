AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with Public Subnets, Application Load Balancer, and Auto Scaling Group with Specific Instance Distribution

Parameters:
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Description: CIDR block for the first public subnet (2 instances)
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Description: CIDR block for the second public subnet (1 instance)
    Type: String
    Default: 10.0.2.0/24
  InstanceType:
    Description: EC2 instance type for the ASG
    Type: String
    Default: t2.micro
  MinInstances:
    Description: Minimum number of instances in the ASG (total 3)
    Type: Number
    Default: 3
  MaxInstances:
    Description: Maximum number of instances in the ASG (total 6)
    Type: Number
    Default: 6

Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2SSMCloudWatchPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:DescribeAssociation"
                  - "ssm:GetDeployablePatchSnapshotForInstance"
                  - "ssm:GetDocument"
                  - "ssm:DescribeDocument"
                  - "ssm:GetManifest"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:ListAssociations"
                  - "ssm:ListInstanceAssociations"
                  - "ssm:PutInventory"
                  - "ssm:PutComplianceItems"
                  - "ssm:PutConfigurePackageResult"
                  - "ssm:UpdateAssociationStatus"
                  - "ssm:UpdateInstanceAssociationStatus"
                  - "ssm:UpdateInstanceInformation"
                  - "ssmmessages:CreateControlChannel"
                  - "ssmmessages:CreateDataChannel"
                  - "ssmmessages:OpenControlChannel"
                  - "ssmmessages:OpenDataChannel"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "*"
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyPublicInternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: "eu-west-1a"  # Update with your AZs
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: "eu-west-1b"  # Update with your AZs
      MapPublicIpOnLaunch: true

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  PublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to ALB from internet through port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 #how to refrence both 
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allow all inbound traffic for demo
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access from your IP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # Replace with your IP or CIDR

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80  # Update with your target port
      TargetType: instance
      Protocol: HTTP  # Specify the protocol your instances are listening on

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: [ !GetAtt ALBSecurityGroup.GroupId, !GetAtt SSHSecurityGroup.GroupId ]
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      Type: application

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB  # Reference the ALB resource
      Port: 80  # Update with your listener port (same as target port)
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup  # Reference the target group
          Type: forward
      Protocol: HTTP  # Specify the listener protocol (e.g., HTTPS for secure traffic)


  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      DesiredCapacity: '3'
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1  # Launch 2 instances in PublicSubnet1
        - !Ref PublicSubnet1  # Launch 2 instances in PublicSubnet1 (one per AZ)
        - !Ref PublicSubnet2  # Launch 1 instance in PublicSubnet2

  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2Role
  
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0c1c30571d2dae5c9 # Replace with your AMI ID
      InstanceType: !Ref InstanceType
      KeyName: n-cloudf
      IamInstanceProfile: !Ref MyInstanceProfile
      SecurityGroups:
        - !Ref ALBSecurityGroup
        - !Ref SSHSecurityGroup
      # Add any additional launch configuration properties here (e.g., SecurityGroups)
      UserData: !Base64 | # Script to install
        #!/bin/bash
        sudo apt install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        sudo apt install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
        sudo systemctl start amazon-ssm-agent
        sudo systemctl enable amazon-ssm-agent
        sudo systemctl start amazon-cloudwatch-agent
        sudo systemctl enable amazon-cloudwatch-agent